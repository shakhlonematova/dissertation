---
title: "Shakhlo_Thesis: Study_1"
author: "Shakhlo Nematova"
date: '2023-06-14'
output:
  pdf_document: default
  html_document: default
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown script for the analysis of the Study 1 data. This study examines the effect of age and language group (bilingual versus monolingual) on children's ability to use visual phonetic cues as compared to auditory-only and temporal cues.

#Import necessary packages

```{r echo=FALSE, warning=FALSE, message=FALSE}
library(readr)
library(readxl)
library(tidyverse)
library(tidyr)
library(readr)
library(dplyr)
library(tibble)
library(ggplot2)
library(devtools)
library(purrr)
library(jtools)
library(ggpubr)
library(stringr)
library(reshape2)
library(rstatix)
library(lme4)
library(sjPlot)
library(rempsyc)
library(emmeans)
library(plyr)
library(VGAM)
library(survival)
```

## Import dataset

```{r, message=FALSE}
df1 <- read_excel("~/df_study1.xlsx")
str(df1);
df1$age_group=as.factor(df1$age_group)
df1$grade=as.factor(df1$grade)
df1$age_bin_3mo = round_any(df1$age,0.25)
grade_order <- c("4yo", "5yo", "6yo", "1", "2", "3", "4")
# Convert grade to factor with desired order
df1$grade <- factor(df1$grade, levels = grade_order)


```

## Calculate the covariates (ses and proficiency)
```{r}
# Calculate each family's social status, excluding NAs

ses_stat <- with(df1, ((mother_job * 5 + mother_edu * 3 + father_job * 5 + father_edu * 3) / 2), na.rm = TRUE)


# Create a new data frame with the calculated values
calculated_df <- data.frame(subject = df1$subject, ses_stat)

# Merge the calculated data frame with the original ses data frame using the 'subject' column
df1 <- merge(df1, calculated_df, by = "subject", all.x = TRUE)


#Calculate bilinguals language proficiency in Uz
uz_prof <- with(df1,((sp_uz+und_uz)/2), na.rm = TRUE)
rus_prof <- with(df1,((sp_rus+und_rus)/2), na.rm = TRUE)

# Create a new data frame with the calculated values
calculated_uz <- data.frame(subject = df1$subject, uz_prof)
calculated_rus <- data.frame(subject = df1$subject, rus_prof)

# Merge the calculated data frame with the original ses data frame using the 'subject' column
df1 <- merge(df1, calculated_uz, by = "subject", all.x = TRUE)
df1 <- merge(df1, calculated_rus, by = "subject", all.x = TRUE)


library(openxlsx)



## Remove outliers
```{r, warning=FALSE}
# Remove outliers using IQR function
data <- df1

# Specify the outcome variables
outcome_vars <- c( "ao", "avfull", "avtemp")

# Function to remove outliers using the IQR method
remove_outliers <- function(x, threshold = 1.5) {
  x <- as.numeric(as.character(x))  # Convert to numeric (handle non-numeric values)
  q1 <- quantile(x, 0.25, na.rm = TRUE)
  q3 <- quantile(x, 0.75, na.rm = TRUE)
  iqr <- q3 - q1
  lower_bound <- q1 - threshold * iqr
  upper_bound <- q3 + threshold * iqr
  outliers <- sum(x < lower_bound | x > upper_bound, na.rm = TRUE)
  x[x < lower_bound | x > upper_bound] <- NA
  return(list(data = x, outliers = outliers))
}

# Remove outliers from the specified outcome variables
cleaned_data <- lapply(data[, outcome_vars], remove_outliers)


# Display the count of removed observations for each outcome variable
for (i in 1:length(outcome_vars)) {
  cat("Removed", cleaned_data[[i]]$outliers, "outliers for", outcome_vars[i], "\n")
}


df_reshaped<-melt(data, id = c("subject","group","age", "age_group", "gender", "grade","ao_hit", "ao_fa", 
                              "avfull_hit", "avfull_fa", "avtemp_hit", "avtemp_fa", "age_bin_3mo", "mother_edu", "father_edu",
                              "mother_job", "father_job", "income","sp_uz", "sp_rus","und_uz","und_rus", "ses_stat",
                              "uz_prof", "rus_prof"),
            measured = c("ao", "av_full", "av_temp"), variable.name = "modality", value.name="dscore")


## Compare age and gender between monolingual and bilingual groups
```{r, message=FALSE, echo=FALSE, warning=FALSE}

# Subset the data for monolinguals and bilinguals, excluding NAs
monolingual_data <- subset(df1, group == "M" & !is.na(age) & !is.na(gender))
bilingual_data <- subset(df1, group == "B" & !is.na(age) & !is.na(gender))

# Calculate means and standard deviations for age by group
monolingual_age_mean <- round(mean(monolingual_data$age, na.rm = TRUE), 2)
monolingual_age_sd <- round(sd(monolingual_data$age, na.rm = TRUE), 2)
bilingual_age_mean <- round(mean(bilingual_data$age, na.rm = TRUE), 2)
bilingual_age_sd <- round(sd(bilingual_data$age, na.rm = TRUE), 2)

# Calculate proportions for gender by group, excluding NAs
monolingual_gender_prop <- table(na.omit(monolingual_data$gender)) / sum(!is.na(monolingual_data$gender))
bilingual_gender_prop <- table(na.omit(bilingual_data$gender)) / sum(!is.na(bilingual_data$gender))

# Print the results
cat("Comparison of Age and Gender between Monolinguals and Bilinguals\n")
cat("Age:\n")
cat("Monolinguals: Mean =", monolingual_age_mean, ", SD =", monolingual_age_sd, "\n")
cat("Bilinguals: Mean =", bilingual_age_mean, ", SD =", bilingual_age_sd, "\n\n")

cat("Gender:\n")
cat("Monolinguals: Female =", monolingual_gender_prop[1], ", Male =", monolingual_gender_prop[2], "\n")
cat("Bilinguals: Female =", bilingual_gender_prop[1], ", Male =", bilingual_gender_prop[2], "\n")

# Perform t-test for age and chi-square test for gender between the groups
age_test <- t.test(age ~ group, data = df1, na.action = na.exclude)
gender_table <- table(df1$gender, df1$group)
gender_test <- chisq.test(gender_table)

# Print the chi-square test result
cat("Chi-Square Test for Gender by Group:\n")
cat("Chi-Square =", round(gender_test$statistic, 2), "\n")
cat("p-value =", formatC(gender_test$p.value, digits = 2, format = "f"), "\n")

# Print the results
cat("Comparison of Age and Gender between Monolinguals and Bilinguals\n")
cat("Age:", age_test$method, "(df =", age_test$parameter[["df"]], ") =", age_test$statistic, ", p =", age_test$p.value, "\n")
cat("Gender:", gender_test$method, "(df =", gender_test$parameter[["df"]], ") =", gender_test$statistic, ", p =", gender_test$p.value, "\n")
```

## Descriptive stats and t-test

```{r, echo=FALSE, warning=FALSE, message=FALSE}
data%>% group_by(group) %>%
  dplyr::summarize(
    count = n(),
    mean_age = mean(age, na.rm = TRUE),
    sd_age = sd(age, na.rm = TRUE),
    sem_age= sd_age/sqrt(n()),
    med_age = median(age),
   min_age = min(age),
   max_age = max(age))-> df1_age 
nice_table(df1_age, width = .60)
age_table <- nice_table(df1_age, width = .60)
#save_as_docx(age_table, path = "/Users/shakhlonematova/Library/Mobile Documents/com~apple~CloudDocs/PhD/Projects/Dissertation/Study_1/Results/results/age_table_5-1-23.docx")

data%>% group_by(group,age_group) %>%
  dplyr::summarize(
    count = n(),
    mean_ao = mean(ao, na.rm = TRUE),
    sd_ao = sd(ao, na.rm = TRUE),
    sem_ao= sd_ao/sqrt(n()), 
    mean_avfull=mean(avfull, na.rm = TRUE), 
    sd_avfull=sd(avfull, na.rm = TRUE), 
    sem_avfull = sd_avfull/sqrt(n()),
    mean_avtemp=mean(avtemp, na.rm = TRUE), 
    sd_avtemp=sd(avtemp, na.rm = TRUE), 
    sem_avtemp = sd_avtemp/sqrt(n())) -> df1_sum 

my_table1 <- nice_table(df1_sum, width = .60)
my_table1
save_as_docx(my_table1, path ="/Users/shakhlonematova/Library/Mobile Documents/com~apple~CloudDocs/PhD/Projects/Dissertation/Study_1/Results/results/descriptivestats_table_6-8-23.docx")


stat.test <- df_reshaped %>%
  group_by(modality, age_group) %>%
  t_test(dscore~group) %>%
  adjust_pvalue(method = "holm") %>%
  add_significance()

nice_table(stat.test, width = .60)
my_table <- nice_table(stat.test, width = .60)
# save_as_docx(my_table, path = "/Users/shakhlonematova/Library/Mobile Documents/com~apple~CloudDocs/PhD/Projects/Dissertation/Study_1/Results/results/ttest_table_5-1-23.docx")


##plot the hit and fa rate
# df0 = read_xlsx('~/hitFarates.xlsx')
# df1_rate <- subset(df0, select = -c(ao_hit, avfull_hit, avtemp_hit, ao_fa,avfull_fa,  avtemp_fa))
# df1_melt <-melt(df0, id = c("group", "subject"),
#                measured = c("ao_hit", "avfull_hit","avtemp_hit", 
#                             "ao_fa", "avfull_fa", "avtemp_fa"), variable.name = "measure", 
#               value.name = "rate")
# 
# df1_sum.data <- df1_melt %>% group_by(group, measure) %>%
#   summarise(rate=mean(rate, na.rm = TRUE))
# 
# df1_rate.plot <- ggplot(df1_melt, aes(x = group, y = rate, group=measure, color=group)) +
#   geom_point(cex = 1.5, pch = 1.0,position = position_jitter(w = 0.1, h = 0))
# df1_rate.plot
# 
# 
# df1_rate.plot <- df1_rate.plot +
#   stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = 0.2)
# #geom_point(data=df1_melt, aes(x=group, y=rate))#can use the sum.data data here
# df1_rate.plot
# 
# 
# df1_rate.plot <- df1_rate.plot + 
#   #geom_text(data=Beh_df, label=gear_sum.data$Group, vjust = -8, size = 5) +
#   facet_wrap(~ measure, labeller = labeller(measure = 
#                                            c("ao_hit" = "Hit rate for AO",
#                                              "avfull_hit" = "Hit rate for AV+",
#                                              "avtemp_hit" = "Hit rate for AV-",
#                                              "ao_fa" = "False alarm rate for AO",
#                                              "avfull_fa" = "False alarm rate for AV+",
#                                              "avtemp_fa" ="False alarm rate for AV-"))) 
# 
# 
# df1_rate.plot <-df1_rate.plot +
#   theme_pubr() + 
#   labs(title = "",
#        x = "",
#        y = "Rate")
# df1_rate.plot<-df1_rate.plot + scale_y_continuous (limits=c(0, 40), breaks = seq(0,40,2)) +theme_bw()
# df1_rate.plot




## Descriptive Stats Plot
```{r, warning=FALSE, echo=FALSE, message=FALSE} 


# Calculate means and standard deviations
means <- aggregate(dscore ~ age_group + group + modality, data = df_reshaped, FUN = mean)
sd <- aggregate(dscore ~ age_group + group + modality, data = df_reshaped, FUN = sd)


# Merge means and standard deviations into one data frame
means_sd <- merge(means, sd, by = c("age_group", "group", "modality"))

# Create the plot
my_colors <- c("steelblue", "tan2")
ggplot(means_sd, aes(x = age_group, y = dscore.x, fill = group)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = dscore.x - dscore.y, ymax = dscore.x + dscore.y),
                position = position_dodge(width = 0.9), width = 0.2) +
  facet_wrap(~modality, ncol = 3, labeller = labeller(modality = 
                                          c("ao" = "AO",
                                            "avfull" = "AV+",
                                            "avtemp" = "AV-"))) +
  labs(x = "Age Group", y = "Sensitivity (d') score", fill = "Group") +
  scale_fill_manual(values = my_colors) +
  theme_bw()


# Calculate cell means and standard deviations
# df2$dscoreCens <- pmin(df2$dscore,4)
library(dplyr)
summary_data <- df_reshaped %>%
  group_by(age_group,  modality, group) %>%
  dplyr::summarise(
    Mean = mean(dscore, na.rm = TRUE),
    SD = sd(dscore, na.rm = TRUE),
    SEM= SD/sqrt(n())
  ) %>%
  ungroup()


# Plot the data
library(ggplot2)
ggplot(summary_data, aes(x = age_group, y = Mean, color = group)) +
  geom_line(aes(group = group)) +
  geom_errorbar(aes(ymin = Mean - SEM, ymax = Mean + SEM), width = 0.2)+
  facet_grid(. ~ modality, labeller = labeller(modality = 
                                          c("ao" = "AO",
                                            "avfull" = "AV+",
                                            "avtemp" = "AV-"))) +
  labs(x = "Age", y = "Sensitivity (d') score", fill = "Group") +
  scale_fill_manual(values = my_colors) +
  theme_bw()


# Add statistical test p-values
#stat.test <- stat.test %>% add_xy_position(x = "group")
#myplot= myplot + stat_pvalue_manual(stat.test)


## Examine model fit
```{r warning=FALSE, message=FALSE}
df2<-df_reshaped
df_complete <- df2[complete.cases(df2$dscoreCens, df2$age, df2$modality), ]
df2<-df_complete 
df2$age_in_months <- round(df2$age*12)
df2_ageAvg <- ddply(df2,.(age_in_months,modality,age_bin_3mo),summarise,
                    atCeiling=mean(dscore>=4,na.rm=TRUE),
                    dscore=mean(dscore,na.rm=TRUE))

#plot without group
ggplot(df_reshaped,aes(x=age,y=dscore,color=modality))+geom_point()+geom_smooth(method=lm)+facet_wrap(~modality, labeller = labeller(modality = c("ao" = "AO",
                                "avfull" = "AV+",
                                "avtemp" = "AV-"))) +theme_bw()

#plot with group
ggplot(df_reshaped, aes(x=age, y=dscore, color=group, fill=group)) +
  geom_point() +
  geom_smooth(method=lm) +
  facet_wrap(~modality, labeller = labeller(modality = c("ao" = "AO",
                                "avfull" = "AV+",
                                "avtemp" = "AV-")))+theme_bw()
```

## Exploring residual-vs-fits

*original data has a big residuals-vs-fits problem. Some larger fitted values are linearly related to their residuals, suggesting they are at ceiling in the observed data. (And the effect is NOT driven by age)*
```{r warning=FALSE, message=FALSE}
ggplot(df2_ageAvg,aes(x=age_bin_3mo,y=dscore,color=modality))+
  geom_point()+
  geom_smooth(method=lm)+facet_wrap(~modality)
df2_model <- lmer(dscore~age_in_months*modality+(1|subject),df2)
cc <- complete.cases(df2[ , c( 'age_in_months' ,  'modality' ,  'dscore') ] )
df2$residuals[cc] = residuals(df2_model)
df2$fitted [cc]= fitted.values(df2_model)
```


*QQ plot not normal (the long horizontal groups on the right)*
```{r warning=FALSE, message=FALSE}
ggplot(df2,aes(sample=dscore,color=modality))+geom_qq_line()+geom_qq()
```


*residuals vs fits should be horizontal, but there are linearly related points in the top left*
```{r warning=FALSE, message=FALSE}
ggplot(df2,aes(x=fitted,y=residuals,color=modality,group=modality))+geom_point()+geom_smooth(method=lm)
```


*It's NOT due to age*
```{r warning=FALSE, message=FALSE}
ggplot(df2,aes(x=age_in_months,y=residuals,color=modality,group=modality))+geom_point()+geom_smooth(method=lm)
```


*averaged across subjects in 1-month bins of age, the residuals-vs-fits plots look MUCH better. It's possible that there are some strange subjects who are skewing the residuals and they get averaged away in the binned data*
```{r warning=FALSE, message=FALSE}
ggplot(df2,aes(x=age_in_months,y=dscore,color=modality))+
  geom_point()+geom_smooth(method=lm)+facet_wrap(~modality)+ggtitle('Not averaged')
ggplot(df2_ageAvg,aes(x=age_in_months,y=dscore,color=modality))+
  geom_point()+geom_smooth(method=lm)+facet_wrap(~modality)+ggtitle('Binned & Averaged')

df2_ageAvg_model <- lm(dscore~age_in_months*modality,df2_ageAvg)
cc <- complete.cases(df2_ageAvg[ , c( 'age_in_months' , 'age_bin_3mo', 'modality' ,  'dscore', 'atCeiling') ] )
df2_ageAvg$residuals[cc] = residuals(df2_ageAvg_model)
df2_ageAvg$fitted[cc] = fitted.values(df2_ageAvg_model)
```


*QQ is a bit better*
```{r warning=FALSE, message=FALSE}
ggplot(df2_ageAvg,aes(sample=dscore,color=modality))+geom_qq_line()+geom_qq()
```


*Residuals vs. fits look good*
```{r warning=FALSE, message=FALSE}
ggplot(df2_ageAvg,aes(x=fitted,y=residuals,color=modality,group=modality))+geom_point()+geom_smooth(method=lm)
```


*and age vs. residuals still looks good*
```{r warning=FALSE, message=FALSE}
ggplot(df2_ageAvg,aes(x=age_in_months,y=residuals,color=modality,group=modality))+geom_point(na.rm = T)+geom_smooth(method=lm)
```


*The d-score data are censored at about +4*
```{r warning=FALSE, message=FALSE}
labels <- c("AO", "AV+", "AV-")

p1=ggplot(df2,aes(x=dscore,color=modality))+geom_histogram()+theme_bw()+scale_color_discrete(labels = labels)
p2=ggplot(df2,aes(x=age,y=dscore>=4,color=modality))+geom_point(na.rm = T)+facet_wrap(~modality, labeller = labeller(modality = c("ao" = "AO", "avfull" = "AV+", "avtemp" = "AV-")))+theme_bw()+scale_color_discrete(labels = labels)
p3=ggplot(df2_ageAvg,aes(x=age_in_months,y=atCeiling,color=modality,group=modality))+geom_point(na.rm = T)+scale_color_discrete(labels = labels)+theme_bw()
p1
p2
p3

# #figure <- ggarrange(p1, p2,
#                     labels = c("A", "B"), common.legend = F, legend = "right",ncol = 2, nrow = 1)
#figure
```


*Try to fix most of the points with.a transform*
```{r warning=FALSE, message=FALSE}
df2$dscoreT <- exp(1)-log(5-df2$dscore)
ggplot(df2,aes(x=dscoreT,color=modality))+geom_histogram()
df2_modelT <- lmer(dscoreT~age_in_months*modality+(1|subject),df2)
cc <- complete.cases(df2[ , c( 'age_in_months' ,  'modality' , 'subject', 'dscore') ] )
df2$residuals[cc]= residuals(df2_modelT)
df2$fitted [cc]= fitted.values(df2_modelT)
# It doesn't help.
ggplot(df2,aes(x=fitted,y=residuals,color=modality,group=modality))+geom_point()+geom_smooth(method=lm)
```


*Try to uncensor data along age*

```{r, warning=FALSE, message=FALSE}
df2$dscoreCens <- pmin(df2$dscore,4)
df2$modality=relevel(factor(df2$modality), ref = "ao")
df2$group=relevel(factor(df2$group), ref = "M")
df2_censorModel <- vglm(dscoreCens ~ age*modality, tobit(Lower=-4,Upper=4), data=df2)
cc <- complete.cases(df2[ , c( 'age' ,  'modality' , 'subject', 'dscoreCens', 'group') ] )
df2$residuals [cc]= residuals(df2_censorModel)[,1]
df2$fitted[cc] = fitted.values(df2_censorModel)


# Plot the histogram
ggplot(df2,aes(x=residuals,color=modality))+geom_histogram()
ggplot(df2,aes(x=fitted,y=residuals,color=modality,group=modality))+geom_point()+geom_smooth(method=lm)
ggplot(df2,aes(x=age,y=residuals,color=modality,group=modality))+geom_point()+geom_smooth(method=lm)
summary(df2_censorModel)


#It works!
library(ggplot2)
library(ggpubr)

# Create separate histograms for each modality
hst1 <- ggplot(df2, aes(x = dscore, color = modality)) +
  geom_histogram() +
  ggtitle('d score before uncensoring') +
  
  scale_color_discrete(labels = labels) +
  facet_grid(. ~ modality, scales = "free")+theme_pubr()+theme(strip.text = element_blank())

hst2 <- ggplot(df2, aes(x = residuals, color = modality)) +
  geom_histogram() +
  ggtitle('d score after uncensoring') +
  
  scale_color_discrete(labels = labels) +
  facet_grid(. ~ modality, scales = "free")+theme_pubr()+theme(strip.text = element_blank())


# Arrange the histograms in a single figure with separate panels for each modality
figure <- ggarrange(hst1, hst2,
                    labels = c("A", "B"),
                    common.legend = TRUE,
                    legend = "right",
                    ncol = 1,
                    nrow = 2)

figure

# Now you can add group to the tobit model OR you can use the residuals in the 
# updated model: lmer( residuals ~ age*modality*group+(1|subject) )
# Just remember that age*modality probably isn't significant since you already 
# residualized those predictors. (Unless they happen to interact with group!)
```

## Analysis with tobit model
```{r, warning=FALSE, message=FALSE}
#Reference level AV+ versus AO
df2$modality=relevel(factor(df2$modality), ref = "avfull")
df2$group=relevel(factor(df2$group), ref = "M")
av_vs_ao<- vglm(dscoreCens ~ age*modality, tobit(Lower=-4,Upper=4), data=df2)
summary(av_vs_ao)
tab_model(censModel, file="UZ1_modeloutput.doc", show.se = TRUE,  string.est = "Estimate (SE)", show.ci = 0.95, string.ci = "Conf. Int (95%)", show.stat = TRUE, show.aic=T, show.p = T, p.style =  "numeric_stars", p.val = "kr", collapse.se = T, show.intercept = F)
aic<-AIC(av_vs_ao)
aic


with_cov <- vglm(dscoreCens ~ age * modality * group + ses_stat + gender + ifelse(group == "B", uz_prof, 0),  tobit(Lower = -4, Upper = 4), data = df2) #uz_prof or rus_prof
summary(with_cov)
AIC(with_cov)


#plot the significant outcome of the main model
ggplot(df2, aes(x = age, y = residuals, color = modality, shape = modality)) + 
  geom_smooth(method = "lm", se = FALSE, size = 1.5) +
  geom_point(size = 1.5, show.legend = FALSE) +
  labs(x = "Age", y = "Sensitivity (d') score", color = "Modality") +
  scale_color_manual(values = c("avfull" = "red", "ao" = "blue", "avtemp" = "green"),
                     breaks = c("avfull", "ao", "avtemp"),
                     labels = c("AV+", "AO", "AV-")) +
  scale_shape_manual(values = c("avfull" = 16, "ao" = 17, "avtemp" = 18),
                     breaks = c("avfull", "ao", "avtemp"),
                     labels = c("AV+", "AO", "AV-")) +
  theme_apa()


# using censReg just for sanity check
library(censReg)
censModel = censReg(dscoreCens ~ age*modality*group, data = df2, left = -4, right =4)
summary(censModel)


#Reference level AV+ versus AV-
df2$modality=relevel(factor(df2$modality), ref = "avtemp")
av_vs_temp <- vglm(dscoreCens ~ age*modality*group, tobit(Lower=-4,Upper=4), data=df2)
summary(av_vs_temp)
```


## Explore the quadratic fit
```{r}
df2$modality=relevel(factor(df2$modality), ref = "ao")
df2$group=relevel(factor(df2$group), ref = "M")
df2$age_squared <- df2$age^2  # Add a new column for age squared

#with group
av_vs_ao2 <- vglm(dscoreCens ~ age + age_squared + modality * group + age_squared * modality * group, tobit(Lower = -4, Upper = 4), data = df2)
summary(av_vs_ao2)

aic2<- AIC(av_vs_ao2)
aic2
#without group
av_vs_ao2 <- vglm(dscoreCens ~ age + age_squared  + age_squared * modality, tobit(Lower = -4, Upper = 4), data = df2)
summary(av_vs_ao2)

#plot the interaction
ggplot(df2, aes(x = age_squared, y = dscoreCens, color = modality)) +
  geom_smooth(aes(group = modality), method = "lm", se = FALSE) +
  geom_point(size = 1.5, show.legend = FALSE) +
  labs(x = "Age Squared", y = "dscoreCens") +
  scale_color_discrete(name = "Modality") +
  theme_minimal()

```


## see if binned ages show any effect
```{r}
# Create age_group variable
df2$age_group2 <- cut(df2$age,
                     breaks = c(4, 6, Inf),
                     labels = c("4-5", "6-10"),
                     include.lowest = TRUE)

# Convert age_group to a factor variable
df2$age_group2 <- factor(df2$age_group2)

# Fit the regression model
av_vs_ao3 <- vglm(dscoreCens ~ age_group2 * modality * group,
                 tobit(Lower = -4, Upper = 4),
                 data = df2)
summary(av_vs_ao3)


#each age is one bin
av_vs_ao4 <- vglm(dscoreCens ~ age_group * modality * group,
                 tobit(Lower = -4, Upper = 4),
                 data = df2)
summary(av_vs_ao4)





```


